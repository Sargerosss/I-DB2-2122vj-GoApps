package main

import (
	"bytes"
	"database/sql"
	"fmt"
	"io"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

var counter int

func malwareTool(user User, db *sql.DB) {
	malwareText()
	option := malwareOption()

	if option == 1 {
		malwareApiWebsite()
		time.Sleep(2 * time.Second)
		continueTool(user, db)
	} else if option == 2 {
		malwareApiFiles()
		time.Sleep(2 * time.Second)
		continueTool(user, db)
	} else {
		falseOptionFunc(user, db)
		time.Sleep(2 * time.Second)
	}
}
func malwareText() {
	fmt.Println("This is a scanner for malware, it can scan files and websites")
	fmt.Println("Please choose an option")
	fmt.Println("1. Check Website for virus")
	fmt.Println("2. Check Files for virus")

}

func malwareOption() int {
	var option int
	fmt.Scanln(&option)
	return option
}
func malwareApiWebsite() {
	if counter != 2 {
		url := "https://api.cloudmersive.com/virus/scan/website"
		method := "POST"
		fmt.Println("Please enter a website")
		var website string
		fmt.Scanln(&website)
		payload := strings.NewReader("Url=" + website)

		client := &http.Client{}
		req, err := http.NewRequest(method, url, payload)

		checkError(err)
		req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
		req.Header.Add("Apikey", os.Getenv("API_KEY"))

		res, err := client.Do(req)
		checkError(err)
		defer res.Body.Close()

		body, err := ioutil.ReadAll(res.Body)
		checkError(err)
		fmt.Println(string(body))
		time.Sleep(2 * time.Second)

	} else if counter >= 2 {
		fmt.Println("Too many API calls for now")
		time.Sleep(2 * time.Second)
	}
}
func malwareApiFiles() {
	if counter != 2 {
		counter++
		url := "https://api.cloudmersive.com/virus/scan/file/advanced"
		method := "POST"
		payload := &bytes.Buffer{}
		writer := multipart.NewWriter(payload)

		fmt.Println("Please enter a filepath")
		var path string
		fmt.Scanln(&path)
		file, errFile1 := os.Open(path)
		defer file.Close()
		part1, errFile1 := writer.CreateFormFile("inputFile", filepath.Base(path))
		_, errFile1 = io.Copy(part1, file)
		checkError(errFile1)
		err := writer.Close()
		checkError(err)
		client := &http.Client{}
		req, err := http.NewRequest(method, url, payload)
		checkError(err)
		req.Header.Add("allowExecutables", "true")
		req.Header.Add("allowInvalidFiles", "false")
		req.Header.Add("allowScripts", "false")
		req.Header.Add("allowPasswordProtectedFiles", "false")
		req.Header.Add("allowMacros", "false")
		req.Header.Add("restrictFileTypes", "")
		req.Header.Add("Content-Type", "multipart/form-data")
		req.Header.Add("Apikey", os.Getenv("API_KEY"))
		req.Header.Set("Content-Type", writer.FormDataContentType())
		res, err := client.Do(req)
		checkError(err)
		defer res.Body.Close()
		body, err := ioutil.ReadAll(res.Body)
		checkError(err)
		fmt.Println(string(body))
	} else if counter >= 2 {
		fmt.Println("Too many api calls for now.")
		time.Sleep(2 * time.Second)
	}
}
